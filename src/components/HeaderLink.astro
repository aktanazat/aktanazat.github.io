---
import type { HTMLAttributes } from "astro/types";
import { pathEqual } from "../utils";

type Props = HTMLAttributes<"a">;

const { href, class: className, ...props } = Astro.props;
const hrefPath = href?.toString().replace(import.meta.env.BASE_URL, "");
const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
const subpath = pathname.match(/[^\/]+/g);
const isActive =
  pathEqual(hrefPath || "", pathname) ||
  pathEqual(hrefPath || "", subpath?.[0] || "");
---

<a href={href} class:list={[className, { active: isActive }]} {...props}>
  <slot />
</a>

<style>
  a {
    font-size: 1.05em; /* Slightly adjusted from global for direct control */
    padding: 0.3em 0.1em; /* Fine-tuned padding */
    color: var(--text-color); /* Default to text-color for non-active/non-hover */
    text-decoration: none;
    transition: color 0.2s ease-in-out, text-underline-offset 0.2s ease-in-out;
    border-radius: 3px; /* Subtle rounding for focus state if browser adds outline */
    position: relative; /* For potential future pseudo-elements if needed */
  }

  a:hover {
    color: var(--link-color);
    text-decoration: underline;
    text-underline-offset: 4px; /* Consistent underline offset */
  }

  a.active {
    color: var(--link-color);
    font-weight: 600; /* Make active link bolder */
    text-decoration: underline;
    text-decoration-style: solid;
    text-decoration-thickness: 2px;
    text-underline-offset: 5px;
  }

  /* Accessibility: Ensure focus is visible */
  a:focus-visible {
    outline: 2px solid var(--link-color);
    outline-offset: 2px;
  }
</style>
