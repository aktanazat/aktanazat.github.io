---
import Layout from "./Layout.astro";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import IconLink from "../components/IconLink.astro";
import Tags from "../components/Tags.astro";
import { generateURL } from "../utils";
import { BLOG_CONFIG } from "../consts";

type Props = CollectionEntry<"blog">["data"] & { id: string };

const { id, title, description, pubDate, updatedDate, heroImage, tags } =
  Astro.props;

const backLink = Astro.url.pathname.indexOf("/blog/") > -1;

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: title,
  image: heroImage,
  datePublished: `${pubDate?.toISOString()}`,
  ...(updatedDate && { dateModified: updatedDate.toISOString() }),
  author: [
    {
      "@type": "Person",
      name: `${BLOG_CONFIG.authorName}`,
      url: `${BLOG_CONFIG.profile}`,
    },
  ],
};
---

<Layout
  title={title}
  description={description}
  heroImage={heroImage}
  structuredData={JSON.stringify(structuredData)}
>
  {
    backLink && (
      <span class="back-link">
        <IconLink
          name="Back"
          href={generateURL("/blog")}
          label="Back"
          extra="Go Back"
          back
        />
      </span>
    )
  }
  <article>
    <div class="hero-image">
      {heroImage && <img width={1020} height={510} src={heroImage} alt="" loading="lazy" />}
    </div>
    <div class="prose">
      <div class="title-section">
        <div class="meta-info">
          <FormattedDate date={pubDate} />
          {
            updatedDate && (
              <div class="last-updated-on">
                Last updated on <FormattedDate date={updatedDate} />
              </div>
            )
          }
        </div>
        <h1>
          <span transition:name={`post-title-${id}`}>{title}</span>
        </h1>
        <hr />
      </div>
      <slot />
      <Tags tags={tags} />
    </div>
  </article>
</Layout>

<style>
  .back-link {
    display: inline-block;
    margin: 1rem 0 1rem -0.5rem;
  }

  .hero-image {
    margin-bottom: 2rem;
  }

  .hero-image img {
    width: 100%;
    height: auto;
    border-radius: 8px;
  }

  .prose .title-section {
    margin-bottom: 2rem;
  }

  .prose .title-section h1 {
    font-size: 2.5em;
    margin-top: 0.5em;
    margin-bottom: 0.25em;
    line-height: 1.2;
  }

  .prose .title-section hr {
    margin-top: 1rem;
    margin-bottom: 2rem;
    border-top: 1px solid var(--border-color);
  }
  
  .meta-info {
    font-size: 0.9em;
    color: var(--text-color);
    opacity: 0.9;
    margin-bottom: 0.5rem;
  }

  .last-updated-on {
    margin-top: 0.25rem;
    font-size: 0.9em;
  }

  .prose > :global(p):last-of-type,
  .prose > :global(ul):last-of-type,
  .prose > :global(ol):last-of-type,
  .prose > :global(blockquote):last-of-type,
  .prose > :global(pre):last-of-type {
    margin-bottom: 2rem;
  }

</style>

<script>
  import mediumZoom from "medium-zoom/dist/pure";
  import "medium-zoom/dist/style.css";

  const zoom = mediumZoom(".prose img", {
    margin: 24,
    background: "rgba(0, 0, 0, 0.2)",
    scrollOffset: 0,
  });

  document.addEventListener("astro:after-swap", () => {
    zoom.attach(".prose img");
  });
</script>
